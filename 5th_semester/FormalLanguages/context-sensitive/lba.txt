; LBA that checks whether a given number is prime

; The LBA is multi-track:
; -------+-------------------+---------
;  track |    description    | example
; -------+-------------------+---------
;    a   | input (untouched) |  1011
; -------+-------------------+---------
;    b   |   working track   |  0101
; -------+-------------------+---------
;    с   |    subtrahend     |  1110

; Values on all tracks are two's complement.
; The top digits on tracks a and b are assumed 0, on track c - 1. These are not stored.

; This LBA may be represented as a single-track LBA with values in '0'..'7', where
; '0' == 000 on tracks, '1' == 100, '2' == 010 etc. (big-endian here)

; Input alphabet: {'0', '1'}. Input number is little-endian.
; '&' and '#' are begin and end markers, respectively.
; '.' means '0' or '1'. The "fair" LBA can be generated with `to_fair_lba.py`.
; '-' means "leave the cell unchanged".


; BEGIN - input is located on track A


; [1], head on '&'
; when input is "0" or "1":
;   true  -> reject
;   false -> [2]
; ~~~> head to the right of '&'

s100 &   -   r s101
s101 ... -   r s102

s102 #   -   l HALT-REJECT
s102 0.. -   l s103
s102 1.. -   l s103

s103 0.. -   l s103
s103 1.. -   l s103
s103 &   -   r s200


; [2], head to the right of '&'
; c <- 1...10 // e.g. 11110
; -> [3]
; ~~~> head on '#'

s200 ... ..1 r s200
s200 #   -   l s201
s201 ..1 ..0 r s300


; [3], head on '#'
; b <- a
; -> [4]
; ~~~> head to the left of '#'

s300 #   -   l s301
s301 1.. 11. l s301
s301 0.. 00. l s301
s301 &   -   r s302

s302 ... -   r s302
s302 #   -   l HALT-ACCEPT


; [4], head to the left of '#'
; b <- b + c
; when overflow at the top digit
;   true  -> [5] // has not crossed 0
;   false -> [6] // has crossed 0
; ~~~> head on '&'


; [5], head on '&'
; when b == 0
;   true  -> reject // remainder == 0
;   false -> [4]
; ~~~> head to the left of '#'


; [6], head on '&'
; c--
; -> [7]
; ~~~> head to the left of '#'


; [7], head to the left of '#'
; b <- b + c
; -> [8]
; ~~~> head on '&'


; [8], head on '&'
; when b == 0
;   true  -> accept // reached input number with no divisors found
;   false -> [3]
; ~~~> head on '#'

